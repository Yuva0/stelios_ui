{
  "grateful": {
    "title": "Thank you for using Stelios!",
    "description_1": "If you've enjoyed using my design system and appreciate it's features, I would be incredibly grateful if you could show your support by starring the",
    "description_2": "repository",
    "description_3": "A tremendous amount of thought, effort, and time has gone into crafting a responsive, accessible, and versatile system and one star would be a great way to show your appreciation."
  },
  "components": {
    "title": "Components"
  },
  "props": {
    "usage": {
      "label": "Usage",
      "value": "usage"
    },
    "props": {
      "label": "Props",
      "value": "props"
    },
    "theme": {
      "label": "Theme",
      "value": "theme"
    }
  },
  "button": {
    "title": "Button",
    "path": "button",
    "description": "A button initiates an action when clicked.",
    "usage": {
      "installation": {
        "label": "Installation Guide",
        "description": "import { Button } from \"stelios\""
      },
      "variants": {
        "label": "Variants",
        "description": "Button comes in multiple variants: contained, outlined, soft, outlined-soft & neumorph."
      },
      "sizes": {
        "label": "Sizes",
        "description": "Button comes in multiple sizes: small, medium & large."
      },
      "icons": {
        "label": "Icons",
        "description": "Button can have icons: leading, trailing or both."
      },
      "rounded": {
        "label": "Rounded",
        "description": "Button can be rounded or not."
      },
      "disabled": {
        "label": "Disabled",
        "description": "Button can be disabled or not."
      },
      "fullWidth": {
        "label": "Full Width",
        "description": "Button can be full width or not."
      }
    },
    "props": {
      "label": "Button Props",
      "variant": {
        "name": "variant",
        "description": "The variant of the button",
        "type": "contained | outlined | soft | outlined-soft | neumorph",
        "default": "contained"
      },
      "size": {
        "name": "size",
        "description": "The size of the button",
        "type": "small | medium | large",
        "default": "medium"
      },
      "rounded": {
        "name": "rounded",
        "description": "Is the button rounded or not?",
        "type": "boolean",
        "default": "false"
      },
      "disabled": {
        "name": "disabled",
        "description": "Is the button disabled or not?",
        "type": "boolean",
        "default": "false"
      },
      "isFullWidth": {
        "name": "isFullWidth",
        "description": "Is the button full width or not?",
        "type": "boolean",
        "default": "false"
      },
      "color": {
        "name": "color",
        "description": "The color of the button created using the color palette",
        "type": "string",
        "default": "#00b4d8"
      },
      "leadingIcon": {
        "name": "leadingIcon",
        "description": "The leading icon of the button",
        "type": "ReactNode",
        "default": "null"
      },
      "trailingIcon": {
        "name": "trailingIcon",
        "description": "The trailing icon of the button",
        "type": "ReactNode",
        "default": "null"
      },
      "children": {
        "name": "children",
        "description": "The content of the button",
        "type": "ReactNode",
        "default": "null"
      },
      "onClick": {
        "name": "onClick",
        "description": "The function to be called when the button is clicked",
        "type": "(e: React.MouseEvent<HTMLButtonElement>) => void;",
        "default": "undefined"
      }
    }
  },
  "iconButton": {
    "title": "Icon Button",
    "path": "icon-button",
    "description": "IconButton is a button component that can be used to trigger an event or action.",
    "usage": {
      "installation": {
        "label": "Installation Guide",
        "description": "import { IconButton } from \"stelios\""
      },
      "variants": {
        "label": "Variants",
        "description": "IconButton comes in multiple variants: contained, outlined, soft, outlined-soft & neumorph."
      },
      "sizes": {
        "label": "Sizes",
        "description": "IconButton comes in multiple sizes: small, medium & large."
      },
      "disabled": {
        "label": "Disabled",
        "description": "IconButton can be disabled or not."
      }
    },
    "props": {
      "label": "IconButton Props",
      "variant": {
        "name": "variant",
        "description": "The variant of the IconButton",
        "type": "contained | outlined | soft | outlined-soft | neumorph",
        "default": "contained"
      },
      "size": {
        "name": "size",
        "description": "The size of the IconButton",
        "type": "small | medium | large",
        "default": "medium"
      },
      "disabled": {
        "name": "disabled",
        "description": "Is the IconButton disabled or not?",
        "type": "boolean",
        "default": "false"
      },
      "color": {
        "name": "color",
        "description": "The color of the IconButton created using the color palette",
        "type": "string",
        "default": "#00b4d8"
      },
      "icon": {
        "name": "icon",
        "description": "The icon of the IconButton",
        "type": "ReactNode",
        "default": "null"
      },
      "alt": {
        "name": "alt",
        "description": "The alt text of the icon",
        "type": "string",
        "default": "undefined"
      },
      "onClick": {
        "name": "onClick",
        "description": "The function to be called when the IconButton is clicked",
        "type": "(e: React.MouseEvent<HTMLButtonElement>) => void;",
        "default": "undefined"
      }
    }
  },
  "toggleButton": {
    "title": "Toggle Button",
    "path": "toggle-button",
    "description": "Button Group with multiple buttons that can be toggled on or off.",
    "usage": {
      "installation": {
        "label": "Installation Guide",
        "description": "import { ToggleButton } from \"stelios\""
      },
      "sizes": {
        "label": "Sizes",
        "description": "ToggleButton comes in multiple sizes: small, medium & large."
      }
    },
    "props": {
      "toggleButtonGroup": {
        "label": "ToggleButtonGroup Props",
        "children": {
          "name": "children",
          "description": "The content of the ToggleButtonGroup",
          "type": "React.ReactNode | React.ReactNode[]",
          "default": "undefined"
        },
        "value": {
          "name": "value",
          "description": "The selected value of the ToggleButton",
          "type": "string",
          "default": "undefined"
        },
        "width": {
          "name": "width",
          "description": "The width of the ToggleButtonGroup",
          "type": "string",
          "default": "fit-content"
        },
        "color": {
          "name": "color",
          "description": "The color of the ToggleButtonGroup created using the color palette",
          "type": "string",
          "default": "#00b4d8"
        },
        "size": {
          "name": "size",
          "description": "The size of the ToggleButtonGroup",
          "type": "small | medium | large",
          "default": "medium"
        },
        "onClick": {
          "name": "onClick",
          "description": "The function to be called when the ToggleButtonGroup is clicked",
          "type": "(e: React.MouseEvent, value?: string) => void",
          "default": "undefined"
        }
      },
      "toggleButton": {
        "label": "ToggleButton Props",
        "index": {
          "name": "index",
          "description": "The index of the ToggleButton",
          "type": "string",
          "default": "undefined"
        },
        "value": {
          "name": "value",
          "description": "The value of the ToggleButton",
          "type": "string",
          "default": "undefined"
        },
        "children": {
          "name": "children",
          "description": "The content of the ToggleButton",
          "type": "React.ReactNode | React.ReactNode[]",
          "default": "undefined"
        },
        "defaultSelected": {
          "name": "defaultSelected",
          "description": "Is the ToggleButton selected by default?",
          "type": "boolean",
          "default": "false"
        },
        "selected": {
          "name": "selected",
          "description": "Is the ToggleButton selected?",
          "type": "boolean",
          "default": "false"
        },
        "size": {
          "name": "size",
          "description": "The size of the ToggleButton",
          "type": "small | medium | large",
          "default": "medium"
        },
        "onClick": {
          "name": "onClick",
          "description": "The function to be called when the ToggleButton is clicked",
          "type": "(e: React.MouseEvent, value?: string, index?: number) => void",
          "default": "undefined"
        }
      }
    }
  },
  "input": {
    "title": "Input",
    "path": "input",
    "description": "Input is a field that allows users to enter text.",
    "usage": {
      "installation": {
        "label": "Installation Guide",
        "description": "import { Input } from \"stelios\""
      },
      "variants": {
        "label": "Variants",
        "description": "Input comes in multiple variants: contained, outlined and soft."
      },
      "sizes": {
        "label": "Sizes",
        "description": "Input comes in multiple sizes: small, medium & large."
      }
    },
    "props": {
      "_label": "Input Props",
      "variant": {
        "name": "variant",
        "description": "The variant of the Input",
        "type": "contained | outlined | soft",
        "default": "contained"
      },
      "size": {
        "name": "size",
        "description": "The size of the Input",
        "type": "small | medium | large",
        "default": "medium"
      },
      "type": {
        "name": "type",
        "description": "The type of the Input",
        "type": "text | password | email | number | search",
        "default": "text"
      },
      "cursor": {
        "name": "cursor",
        "description": "The cursor of the Input",
        "type": "pointer | text",
        "default": "pointer"
      },
      "color": {
        "name": "color",
        "description": "The color of the Input created using the color palette",
        "type": "string",
        "default": "#00b4d8"
      },
      "disableSearch": {
        "name": "disableSearch",
        "description": "Disable search in the Input",
        "type": "boolean",
        "default": "false"
      },
      "width": {
        "name": "width",
        "description": "The width of the Input",
        "type": "string",
        "default": "15rem"
      },
      "value": {
        "name": "value",
        "description": "The value of the Input",
        "type": "string | string[]",
        "default": "undefined"
      },
      "disabled": {
        "name": "disabled",
        "description": "Is the Input disabled or not?",
        "type": "boolean",
        "default": "false"
      },
      "fullWidth": {
        "name": "fullWidth",
        "description": "Is the Input full width or not?",
        "type": "boolean",
        "default": "false"
      },
      "label": {
        "name": "label",
        "description": "The label of the Input",
        "type": "string",
        "default": "undefined"
      },
      "labelPosition": {
        "name": "labelPosition",
        "description": "The position of the label",
        "type": "top | bottom",
        "default": "top"
      },
      "placeholder": {
        "name": "placeholder",
        "description": "The placeholder of the Input",
        "type": "string",
        "default": "undefined"
      },
      "leadingIcon": {
        "name": "leadingIcon",
        "description": "The leading icon of the Input",
        "type": "React.ReactNode | React.ReactNode[]",
        "default": "undefined"
      },
      "trailingIcon": {
        "name": "trailingIcon",
        "description": "The trailing icon of the Input",
        "type": "React.ReactNode | React.ReactNode[]",
        "default": "undefined"
      }
    }
  },
  "password": {
    "title": "Password",
    "path": "password",
    "description": "Password is a field that allows users to enter a password.",
    "usage": {
      "installation": {
        "label": "Installation Guide",
        "description": "import { Password } from \"stelios\""
      },
      "variants": {
        "label": "Variants",
        "description": "Password comes in multiple variants: contained, outlined and soft."
      },
      "sizes": {
        "label": "Sizes",
        "description": "Password comes in multiple sizes: small, medium & large."
      },
      "hasError": {
        "label": "Show Error",
        "description": "Password can show an error or not."
      },
      "labelPlaceholder": {
        "label": "Label and Placeholder",
        "description": "Password can have a label and a placeholder."
      }
    },
    "props": {
      "_label": "Password Props",
      "variant": {
        "name": "variant",
        "description": "the variant of the password",
        "type": "contained | outlined | soft",
        "default": "contained"
      },
      "size": {
        "name": "size",
        "description": "the size of the password",
        "type": "small | medium | large",
        "default": "medium"
      },
      "cursor": {
        "name": "cursor",
        "description": "the cursor of the password",
        "type": "pointer | text",
        "default": "pointer"
      },
      "color": {
        "name": "color",
        "description": "the color of the password created using the color palette",
        "type": "string",
        "default": "#00b4d8"
      },
      "width": {
        "name": "width",
        "description": "the width of the password",
        "type": "string",
        "default": "15rem"
      },
      "value": {
        "name": "value",
        "description": "the value of the password",
        "type": "string | string[]",
        "default": "undefined"
      },
      "disabled": {
        "name": "disabled",
        "description": "Is the password disabled or not?",
        "type": "boolean",
        "default": "false"
      },
      "fullWidth": {
        "name": "fullWidth",
        "description": "Is the password full width or not?",
        "type": "boolean",
        "default": "false"
      },
      "label": {
        "name": "label",
        "description": "the label of the password",
        "type": "string",
        "default": "undefined"
      },
      "labelPosition": {
        "name": "labelPosition",
        "description": "the position of the label",
        "type": "top | bottom",
        "default": "top"
      },
      "placeholder": {
        "name": "placeholder",
        "description": "the placeholder of the password",
        "type": "string",
        "default": "undefined"
      }
    }
  }
}
