{"version":3,"file":"static/js/655.14ab8238.chunk.js","mappings":"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","sources":["content/DrawerDisplay.tsx"],"sourcesContent":["import React from \"react\";\nimport {\n  Text,\n  useTheme,\n  Tabs,\n  TabPanels,\n  TabPanel,\n  Drawer,\n  Button,\n} from \"stelios\";\nimport {\n  RenderBreadcrumbsForComponent,\n  RenderComponentHeading,\n  RenderProps,\n  renderSideBarItem,\n  RenderTabsList,\n  RenderVariations,\n  useWindowSize,\n} from \"../helpers/helpers\";\nimport i18n from \"../i18n/i18n_en.json\";\nimport { useRef, useState } from \"react\";\n\nconst DRAWER = i18n.drawer;\nconst DrawerDisplay = () => {\n  const windowSize = useWindowSize();\n  const mobile = windowSize.width < 480;\n  const laptop = windowSize.width < 768;\n  const btnRef = useRef(null);\n  const [open, setOpen] = useState(false);\n  const theme = useTheme().theme!;\n  const colorPalette = theme.colorPalette;\n\n  const variationRefs = Array.from({ length: 2 }, () =>\n    React.createRef<HTMLDivElement>()\n  );\n  const propsRef = Array.from({ length: 10 }, () =>\n    React.createRef<HTMLDivElement>()\n  );\n  const [selectedTab, setSelectedTab] = React.useState(\"usage\");\n  const [selectedVariationSideBarItem, setSelectedVariationSideBarItem] =\n    React.useState(0);\n  const [selectedPropsSideBarItem, setSeletedPropsSideBarItem] =\n    React.useState(0);\n\n  const textColor =\n    colorPalette.primary.appearance === \"light\" ? \"black\" : \"white\";\n\n  React.useEffect(() => {\n    const handleScroll = () => {\n      if (selectedTab === \"usage\") {\n        for (let i = 0; i < variationRefs.length; i++) {\n          if (variationRefs[i].current?.getBoundingClientRect().top! > 0) {\n            setSelectedVariationSideBarItem(i);\n            return;\n          }\n        }\n      } else if (selectedTab === \"props\") {\n        for (let i = 0; i < propsRef.length; i++) {\n          if (propsRef[i].current?.getBoundingClientRect().top! > 0) {\n            setSeletedPropsSideBarItem(i);\n            return;\n          }\n        }\n      }\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [variationRefs, propsRef, selectedTab]);\n\n  const CODE_1 = (\n    <div\n      style={{\n        display: \"flex\",\n        gap: \"2rem\",\n        flexWrap: \"wrap\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <Button ref={btnRef} onClick={() => {setOpen(!open)}} color=\"component\">Open Drawer</Button>\n      <Drawer color=\"component\" open={open} title=\"Settings\" size=\"small\" position=\"right\">\n        <Text color=\"component\">This is the drawer container</Text>\n      </Drawer>\n    </div>\n  );\n  const TEXT_1 = `<Drawer open={true} title=\"Settings\" size=\"small\" position=\"right\">\n  <Text>This is the drawer container</Text>\n</Drawer>`;\n\n  return (\n    <div style={{ margin: \"1.5rem 0 4rem 0\", width: mobile ? \"100%\" : laptop ? \"calc(100% - 12rem)\" : \"calc(100% - 22rem)\" }}>\n      <RenderBreadcrumbsForComponent name={DRAWER.title} path={DRAWER.path} />\n\n      <div style={{ padding: \"1rem\" }}>\n        <RenderComponentHeading\n          title={DRAWER.title}\n          description={DRAWER.description}\n        />\n\n        <Tabs color=\"primary\" style={{ marginTop: \"2rem\" }} value={selectedTab} onChange={(value) => setSelectedTab(value)}>\n          {RenderTabsList()}\n          <TabPanels>\n            <div\n              style={{\n                height: \"1px\",\n                width: \"100%\",\n                backgroundColor: colorPalette.primary.accentScale[9],\n                marginTop: \"1rem\",\n              }}\n            />\n            <TabPanel value=\"usage\">\n              <RenderVariations\n                ref={variationRefs[0]}\n                label={DRAWER.usage.installation.label}\n                text={DRAWER.usage.installation.description}\n              />\n              <RenderVariations\n                ref={variationRefs[1]}\n                label={DRAWER.usage.default.label}\n                description={DRAWER.usage.default.description}\n                code={CODE_1}\n                text={TEXT_1}\n              />\n\n              {!laptop && renderSideBarItem([DRAWER.usage.installation.label, DRAWER.usage.default.label], selectedVariationSideBarItem, variationRefs)}\n            </TabPanel>\n            <TabPanel value=\"props\">\n              <Text\n                preciseColor={textColor}\n                size=\"large\"\n                style={{ marginTop: \"2rem\" }}\n              >\n                {DRAWER.props._label}\n              </Text>\n              <RenderProps\n                ref={propsRef[0]}\n                propName={DRAWER.props.children.name}\n                description={DRAWER.props.children.description}\n                type={DRAWER.props.children.type}\n                defaultValue={DRAWER.props.children.default}\n                marginTop=\"1rem\"\n              />\n              <RenderProps\n                ref={propsRef[1]}\n                propName={DRAWER.props.color.name}\n                description={DRAWER.props.color.description}\n                type={DRAWER.props.color.type}\n                defaultValue={DRAWER.props.color.default}\n              />\n\n              {!laptop && renderSideBarItem([DRAWER.props.children.name, DRAWER.props.color.name], selectedPropsSideBarItem, propsRef)}\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </div>\n    </div>\n  );\n};\nexport default DrawerDisplay;\n"],"names":["DRAWER","i18n","DrawerDisplay","windowSize","useWindowSize","mobile","width","laptop","btnRef","useRef","open","setOpen","useState","colorPalette","useTheme","theme","variationRefs","Array","from","length","React","propsRef","selectedTab","setSelectedTab","selectedVariationSideBarItem","setSelectedVariationSideBarItem","selectedPropsSideBarItem","setSeletedPropsSideBarItem","textColor","primary","appearance","handleScroll","i","_variationRefs$i$curr","current","getBoundingClientRect","top","_propsRef$i$current","window","addEventListener","removeEventListener","CODE_1","_jsxs","style","display","gap","flexWrap","justifyContent","alignItems","children","_jsx","Button","ref","onClick","color","Drawer","title","size","position","Text","margin","RenderBreadcrumbsForComponent","name","path","padding","RenderComponentHeading","description","Tabs","marginTop","value","onChange","RenderTabsList","TabPanels","height","backgroundColor","accentScale","TabPanel","RenderVariations","label","usage","installation","text","default","code","renderSideBarItem","preciseColor","props","_label","RenderProps","propName","type","defaultValue"],"sourceRoot":""}