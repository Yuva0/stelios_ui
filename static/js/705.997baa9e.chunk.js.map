{"version":3,"file":"static/js/705.997baa9e.chunk.js","mappings":"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","sources":["content/CodeDisplayDisplay.tsx"],"sourcesContent":["import React from \"react\";\nimport {\n  Text,\n  useTheme,\n  Tabs,\n  TabPanels,\n  TabPanel,\n  CodeDisplay,\n} from \"stelios\";\nimport i18n from \"../i18n/i18n_en.json\";\nimport {\n  RenderBreadcrumbsForComponent,\n  RenderComponentHeading,\n  RenderProps,\n  renderSideBarItem,\n  RenderTabsList,\n  RenderVariations,\n  useWindowSize,\n} from \"../helpers/helpers\";\n\nconst CODEDISPLAY = i18n.codedisplay;\nconst CodeDisplayDisplay = () => {\n  const windowSize = useWindowSize();\n  const laptop = windowSize.width < 768;\n  const mobile = windowSize.width < 480;\n  const theme = useTheme().theme!;\n  const colorPalette = theme.colorPalette;\n\n  const variationRefs = Array.from({ length: 2 }, () =>\n    React.createRef<HTMLDivElement>()\n  );\n  const propsRef = Array.from({ length: 10 }, () =>\n    React.createRef<HTMLDivElement>()\n  );\n  const [selectedTab, setSelectedTab] = React.useState(\"usage\");\n  const [selectedVariationSideBarItem, setSelectedVariationSideBarItem] =\n    React.useState(0);\n  const [selectedPropsSideBarItem, setSeletedPropsSideBarItem] =\n    React.useState(0);\n\n  const textColor =\n    colorPalette.primary.appearance === \"light\" ? \"black\" : \"white\";\n\n  React.useEffect(() => {\n    const handleScroll = () => {\n      if (selectedTab === \"usage\") {\n        for (let i = 0; i < variationRefs.length; i++) {\n          if (variationRefs[i].current?.getBoundingClientRect().top! > 0) {\n            setSelectedVariationSideBarItem(i);\n            return;\n          }\n        }\n      } else if (selectedTab === \"props\") {\n        for (let i = 0; i < propsRef.length; i++) {\n          if (propsRef[i].current?.getBoundingClientRect().top! > 0) {\n            setSeletedPropsSideBarItem(i);\n            return;\n          }\n        }\n      }\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [variationRefs, propsRef, selectedTab]);\n\n  return (\n    <div style={{ margin: \"1.5rem 0 4rem 0\", width: mobile ? \"100%\" : laptop ? \"calc(100% - 12rem)\" : \"calc(100% - 22rem)\" }}>\n      <RenderBreadcrumbsForComponent\n        name={CODEDISPLAY.title}\n        path={CODEDISPLAY.path}\n      />\n      <div style={{ padding: \"1rem\" }}>\n        <RenderComponentHeading\n          title={CODEDISPLAY.title}\n          description={CODEDISPLAY.description}\n        />\n        <Tabs color=\"primary\" style={{ marginTop: \"2rem\" }} value={selectedTab} onChange={(value) => setSelectedTab(value)}>\n          {RenderTabsList()}\n          <TabPanels>\n            <div\n              style={{\n                height: \"1px\",\n                width: \"100%\",\n                backgroundColor: colorPalette.primary.accentScale[9],\n                marginTop: \"1rem\",\n              }}\n            />\n            <TabPanel value=\"usage\">\n              <RenderVariations\n                ref={variationRefs[0]}\n                label={CODEDISPLAY.usage.installation.label}\n                text={CODEDISPLAY.usage.installation.description}\n              />\n              <RenderVariations\n                ref={variationRefs[1]}\n                label={CODEDISPLAY.usage.default.label}\n                description={CODEDISPLAY.usage.default.description}\n                code={CODE_1}\n                text={TEXT_1}\n              />\n\n              {!laptop && renderSideBarItem([\n                CODEDISPLAY.usage.installation.label,\n                CODEDISPLAY.usage.default.label,\n              ], selectedVariationSideBarItem, variationRefs)}\n            </TabPanel>\n            <TabPanel value=\"props\">\n              <Text\n                preciseColor={textColor}\n                size=\"large\"\n                style={{ marginTop: \"2rem\" }}\n              >\n                {CODEDISPLAY.props._label}\n              </Text>\n\n              <RenderProps\n                ref={propsRef[0]}\n                propName={CODEDISPLAY.props.code.name}\n                description={CODEDISPLAY.props.code.description}\n                type={CODEDISPLAY.props.code.type}\n                defaultValue={CODEDISPLAY.props.code.default}\n              />\n              {!laptop && renderSideBarItem([CODEDISPLAY.props.code.name], selectedPropsSideBarItem, propsRef)}\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </div>\n    </div>\n  );\n};\nexport default CodeDisplayDisplay;\n\nconst TEXT_DEMO_1 = `<FormControlLabel control={<Checkbox />} label=\"Option 1\" />\n<FormControlLabel control={<Checkbox />} label=\"Option 2\" />\n<FormControlLabel control={<Checkbox />} label=\"Option 3\" />`;\n\nconst CODE_1 = (\n  <div\n    style={{\n      display: \"flex\",\n      gap: \"2rem\",\n      flexWrap: \"wrap\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      width: \"100%\",\n      overflow: \"hidden\",\n    }}\n  >\n    <CodeDisplay color=\"component\" text={TEXT_DEMO_1} language=\"jsx\"/>\n  </div>\n);\nconst TEXT_1 = `const TEXT_DEMO_1 = \\`<FormControlLabel control={<Checkbox />} label=\"Option 1\" />\\n<FormControlLabel control={<Checkbox />} label=\"Option 2\" />\\n<FormControlLabel control={<Checkbox />} label=\"Option 3\" />\\`;\n<CodeDisplay color=\"component\" text={TEXT_DEMO_1} language=\"jsx\"/>`;\n\n"],"names":["CODEDISPLAY","i18n","CodeDisplayDisplay","windowSize","useWindowSize","laptop","width","mobile","colorPalette","useTheme","theme","variationRefs","Array","from","length","React","propsRef","selectedTab","setSelectedTab","selectedVariationSideBarItem","setSelectedVariationSideBarItem","selectedPropsSideBarItem","setSeletedPropsSideBarItem","textColor","primary","appearance","handleScroll","i","_variationRefs$i$curr","current","getBoundingClientRect","top","_propsRef$i$current","window","addEventListener","removeEventListener","_jsxs","style","margin","children","_jsx","RenderBreadcrumbsForComponent","name","title","path","padding","RenderComponentHeading","description","Tabs","color","marginTop","value","onChange","RenderTabsList","TabPanels","height","backgroundColor","accentScale","TabPanel","RenderVariations","ref","label","usage","installation","text","default","code","CODE_1","TEXT_1","renderSideBarItem","Text","preciseColor","size","props","_label","RenderProps","propName","type","defaultValue","display","gap","flexWrap","justifyContent","alignItems","overflow","CodeDisplay","language"],"sourceRoot":""}